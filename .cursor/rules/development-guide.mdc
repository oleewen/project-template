---
description: 
globs: 
alwaysApply: false
---
# 开发规范

## 代码规范

### 1. 命名规范
- 类名：大驼峰命名，如OrderService
- 方法名：小驼峰命名，如createOrder
- 常量：全大写下划线分隔，如MAX_ORDER_COUNT
- 包名：全小写点号分隔，如com.example.order
- 变量：小驼峰命名，如orderCount

### 2. 注释规范
- 类注释：说明类的用途、作者和创建时间
- 方法注释：说明方法的功能、参数和返回值
- 关键代码注释：说明复杂逻辑的实现思路
- 使用TODO标记待完成的任务

### 3. 异常处理
- 使用自定义异常类
- 在适当的层次处理异常
- 提供有意义的错误信息
- 记录必要的错误日志

### 4. 日志规范
- 使用SLF4J门面
- 合理使用日志级别
- 记录关键业务节点
- 包含必要的上下文信息

## 测试规范

### 1. 单元测试
- 测试类以Test结尾
- 测试方法以test开头
- 每个测试方法测试一个场景
- 使用断言验证结果

### 2. 集成测试
- 测试类以IT结尾
- 测试真实的外部依赖
- 使用测试配置文件
- 清理测试数据

## 版本控制

### 1. Git提交规范
- feature: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 重构
- test: 测试相关
- chore: 构建相关

### 2. 分支管理
- master：主分支
- develop：开发分支
- feature/*：特性分支
- hotfix/*：紧急修复分支
- release/*：发布分支

## 项目构建

### 1. Maven规范
- 统一使用Maven管理依赖
- 遵循Maven标准目录结构
- 合理使用Maven插件
- 管理依赖版本

### 2. 打包部署
- 使用Maven打包
- 配置文件外部化
- 提供启动脚本
- 记录部署文档
